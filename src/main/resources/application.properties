spring.datasource.url=jdbc:mysql://localhost/easybank
spring.datasource.username=springsecurity
spring.datasource.password=springsecurity
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#logging.level.org.springframework.security.web.FilterChainProxy=DEBUG

# the resource server, during the startup, will download the public certificate by connecting to the authorization server
# the authorization server will have a private certificate or private key
# which it is going to digitally sign all the access tokens, ID tokens
# and the resource server, with the help of public certificate, it can validate if the token is valid or not
# this way, the resource server doesn't have to connect to the authorization server every time wants to validate a given access token.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8580/realms/easybanklocal/protocol/openid-connect/certs